Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 1
a.asm



      1					 .386
      2					 assume	CS:code, DS:data, SS:stackseg
      3
      4
      5	    0000			 stackseg segment stack	use16
      6	    0000  0100*(??)			 db	 256	 dup (?)
      7	    0100			 stackseg ends
      8
      9
     10	    0000			 data segment use16
     11	    0000  0001 0002 0003		 matrix	 dw 1, 2, 3
     12	    0006  0000 0007 0008				 dw 0, 7, 8
     13	    000C  0009 0000 0008				 dw 9, 0, 8
     14	    0012  0003				 N		 dw 3
     15	    0014  4D 61	74 72 69 78 20+		 msg_y	 DB 'Matrix is upper-triangle! :)', 13,	10,'$'
     16		  69 73	20 75 70 70 65+
     17		  72 2D	74 72 69 61 6E+
     18		  67 6C	65 21 20 3A 29+
     19		  0D 0A	24
     20	    0033  4D 61	74 72 69 78 20+		 msg_n	 DB 'Matrix is not upper-triangle! :(',	13, 10,'$'
     21		  69 73	20 6E 6F 74 20+
     22		  75 70	70 65 72 2D 74+
     23		  72 69	61 6E 67 6C 65+
     24		  21 20	3A 28 0D 0A 24
     25	    0056			 data ends
     26
     27
     28	    0000			 code segment use16
     29
     30						 include IntLib.inc
1    31					 ;requires include SexyPrnt.inc
1    32
1    33	    0000			 read_int2 proc
1    34	    0000  53				 push	 bx
1    35	    0001  51				 push	 cx
1    36	    0002  52				 push	 dx
1    37
1    38						 local	 temp:word ; локальная	переменная
1    39	    0003  33 C0				 xor	 ax, ax	   ; ax	= 0 для символов
1    40	    0005  33 DB				 xor	 bx, bx	   ; bx	= 0 для знака
1    41	    0007  CD 16				 int	 16h	   ; getch
1    42	    0009  32 E4				 xor	 ah, ah
1    43	    000B  3C 2D				 cmp	 al, 45	   ; char '-'
1    44	    000D  74 0A				 je	 negative
1    45	    000F  EB 00				 jmp	 positive
1    46	    0011			  positive:
1    47	    0011  2D 0030			 sub	 ax, 48
1    48	    0014  89 46	FE			 mov	 temp, ax
1    49	    0017  EB 1B				 jmp	 big_int
1    50	    0019			  negative:
1    51	    0019  BB 0001			 mov	 bx, 1
1    52	    001C  C7 46	FE 0000			 mov	 temp, 0
1    53	    0021  EB 11				 jmp	 big_int
1    54	    0023			  end_loop:
1    55	    0023  83 FB	01			 cmp	 bx, 1
1    56	    0026  74 05				 je	 negative_1
1    57	    0028  8B 46	FE			 mov	 ax, temp
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 2
a.asm



1    58	    002B  EB 2F				 jmp	 end_all
1    59	    002D			  negative_1:
1    60	    002D  8B 46	FE			 mov	 ax, temp
1    61	    0030  F7 D8				 neg	 ax
1    62	    0032  EB 28				 jmp	 end_all
1    63	    0034			  big_int:
1    64	    0034  B8 0000			 mov	 ax, 0
1    65	    0037  CD 16				 int	 16h	 ; getch
1    66	    0039  32 E4				 xor	 ah, ah
1    67						 ;mov dx, ax
1    68						 ;int 21h
1    69	    003B  2D 0030			 sub	 ax, 48
1    70	    003E  B9 0009			 mov	 cx, 9
1    71	    0041  3B C1				 cmp	 ax, cx
1    72	    0043  7F DE				 jg	 end_loop
1    73	    0045  B9 0000			 mov	 cx, 0
1    74	    0048  3B C1				 cmp	 ax, cx
1    75	    004A  7C D7				 jl	 end_loop
1    76
1    77	    004C  8B 4E	FE			 mov	 cx, temp
1    78	    004F  6B C9	0A			 imul	 cx, 10
1    79	    0052  03 C8				 add	 cx, ax
1    80	    0054  89 4E	FE			 mov	 temp, cx
1    81						 ;   mov cx, ax
1    82						 ;   mov ax, temp
1    83						 ;   mov bx, 10
1    84						 ;   imul bx
1    85						 ;   add ax, cx
1    86						 ;   mov temp, ax
1    87	    0057  8B 46	FE			 mov	 ax, temp
1    88	    005A  EB D8				 jmp	 big_int
1    89	    005C			  end_all:
1    90	    005C  5A				 pop	 dx
1    91	    005D  59				 pop	 cx
1    92	    005E  5B				 pop	 bx
1    93	    005F  C3				 ret
1    94	    0060			 read_int2 endp
1    95
1    96	    0060			 print_int2 proc
1    97	    0060  50				 push	 ax
1    98	    0061  53				 push	 bx
1    99	    0062  51				 push	 cx
1   100	    0063  52				 push	 dx
1   101	    0064  55				 push	 bp
1   102
1   103	    0065  8B EC				 mov	 bp, sp
1   104	    0067  8B 46	0C			 mov	 ax, [bp+12]
1   105
1   106	    006A  85 C0				 test	 ax, ax
1   107	    006C  79 0C				 jns	 oi1
1   108
1   109	    006E  8B C8				 mov	 cx, ax
1   110	    0070  B4 02				 mov	 ah, 02h
1   111	    0072  B2 2D				 mov	 dl, '-'
1   112	    0074  CD 21				 int	 21h
1   113	    0076  8B C1				 mov	 ax, cx
1   114	    0078  F7 D8				 neg	 ax
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 3
a.asm



1   115	    007A			  oi1:
1   116	    007A  33 C9				 xor	 cx, cx
1   117	    007C  BB 000A			 mov	 bx, 10
1   118	    007F			  oi2:
1   119	    007F  33 D2				 xor	 dx,dx
1   120	    0081  F7 F3				 div	 bx
1   121	    0083  52				 push	 dx
1   122	    0084  41				 inc	 cx
1   123	    0085  85 C0				 test	 ax, ax
1   124	    0087  75 F6				 jnz	 oi2
1   125	    0089  B4 02				 mov	 ah, 02h
1   126	    008B			  oi3:
1   127	    008B  5A				 pop	 dx
1   128	    008C  80 C2	30			 add	 dl, '0'
1   129	    008F  CD 21				 int	 21h
1   130	    0091  E2 F8				 loop	 oi3
1   131
1   132	    0093  B8 0309			 mov ax, 777
1   133	    0096  5D				 pop	 bp
1   134	    0097  5A				 pop	 dx
1   135	    0098  59				 pop	 cx
1   136	    0099  5B				 pop	 bx
1   137	    009A  58				 pop	 ax
1   138	    009B  C3				 ret
1   139	    009C			 print_int2 endp
1   140
1   141	    009C			 print_int2_array proc
1   142
1   143	    009C  55				 push	 bp
1   144	    009D  50				 push	 ax
1   145	    009E  53				 push	 bx
1   146						 ; total 6
1   147
1   148	    009F  8B EC				 mov	 bp, sp
1   149	    00A1  8B 76	0A			 mov	 si, [bp+10]	; array
1   150	    00A4  8B 5E	08			 mov	 bx, [bp+8]    ; len
1   151	    00A7  D1 E3				 shl	 bx, 1	       ; *size(int) = 2
1   152	    00A9  03 DE				 add	 bx, si	       ; +first	addr
1   153
1   154	    00AB  3B F3				 cmp	 si, bx
1   155	    00AD  74 25				 je	 array_is_empty
1   156
1   157	    00AF  E8 006E			 call print_open_bracket
1   158	    00B2			  print_loop:
1   159	    00B2  8B 04				 mov	 ax, [si]      ; current element
1   160	    00B4  E8 FFA9			 call	 print_int2
1   161	    00B7  E8 0044			 call	 print_comma
1   162	    00BA  E8 0027			 call	 print_space
1   163
1   164	    00BD  83 C6	02			 add	 si, 2
1   165	    00C0  3B F3				 cmp	 si, bx
1   166	    00C2  74 02				 je	 print_end
1   167	    00C4  EB EC				 jmp	 print_loop
1   168
1   169	    00C6			  print_end:
1   170	    00C6  E8 0028			 call	 print_backspace
1   171	    00C9  E8 0025			 call	 print_backspace
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 4
a.asm



1   172	    00CC  E8 005E			 call	 print_close_bracket
1   173	    00CF  E8 0039			 call	 CRLF
1   174	    00D2  EB 0B				 jmp end_print_int2_array
1   175
1   176	    00D4			  array_is_empty:
1   177	    00D4  E8 0049			 call	 print_open_bracket
1   178	    00D7  E8 0053			 call	 print_close_bracket
1   179	    00DA  E8 002E			 call	 CRLF
1   180	    00DD  EB 00				 jmp end_print_int2_array
1   181
1   182	    00DF			  end_print_int2_array:
1   183	    00DF  5B				 pop	 bx
1   184	    00E0  58				 pop	 ax
1   185	    00E1  5D				 pop	 bp
1   186	    00E2  C3				 ret
1   187	    00E3			 print_int2_array endp
1   188
1   189	    00E3			 read_int2_matrix proc
1   190						 ; push	 bp
1   191						 ; push	 ax
1   192						 ; push	 bx
1   193						 ; push	 cx
1   194						 ; push	 dx
1   195						 ; ; +10 overall
1   196
1   197						 ; mov	 bp, sp
1   198						 ; mov	 cx, [bp+14]	; begining of array
1   199						 ; mov	 si, [bp+14]	; pointer to read
1   200						 ; mov	 di, [bp+14]	; pointer to rewrite
1   201						 ; mov	 bx, [bp+12]	; len
1   202						 ; shl	 bx, 1	       ; *size(int) = 2
1   203						 ; add	 bx, si	       ; +first	addr
1   204
1   205					  ; find_loop:
1   206						 ; mov	 dx, [si]      ; current element
1   207						 ; mov	 ax, dx
1   208						 ; call	 is_square
1   209						 ; test	 ax, ax
1   210						 ; jz	 not_square
1   211						 ; mov	 [di], dx
1   212						 ; add	 di, 2
1   213
1   214					  ; not_square:
1   215						 ; add	   si, 2
1   216						 ; cmp	   si, bx
1   217						 ; je	   end_of_array
1   218						 ; jmp	   find_loop
1   219
1   220					  ; end_of_array:
1   221						 ; mov	 si, [bp+14]
1   222						 ; mov	 si, [si]
1   223
1   224						 ;  sub	 di, cx
1   225						 ;  shr	 di, 1
1   226
1   227						 ; pop	 dx
1   228						 ; pop	 cx
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 5
a.asm



1   229						 ; pop	 bx
1   230						 ; pop	 ax
1   231						 ; pop	 bp
1   232	    00E3  C3				 ret
1   233
1   234	    00E4			 read_int2_matrix endp
    235						 include SexyPrnt.inc
1   236					 ; v1.1
1   237
1   238	    00E4			 print_space proc
1   239
1   240	    00E4  50				 push	 ax
1   241	    00E5  52				 push	 dx
1   242
1   243	    00E6  BA 0020			 mov	 dx, 20h
1   244	    00E9  B8 0200			 mov	 ax, 0200h
1   245	    00EC  CD 21				 int	 21h
1   246
1   247	    00EE  5A				 pop	 dx
1   248	    00EF  58				 pop	 ax
1   249	    00F0  C3				 ret
1   250	    00F1			 print_space endp
1   251
1   252	    00F1			 print_backspace proc
1   253
1   254	    00F1  50				 push	 ax
1   255	    00F2  52				 push	 dx
1   256
1   257	    00F3  BA 0008			 mov	 dx, 08h
1   258	    00F6  B8 0200			 mov	 ax, 0200h
1   259	    00F9  CD 21				 int	 21h
1   260
1   261	    00FB  5A				 pop	 dx
1   262	    00FC  58				 pop	 ax
1   263	    00FD  C3				 ret
1   264	    00FE			 print_backspace endp
1   265
1   266	    00FE			 print_comma proc
1   267
1   268	    00FE  50				 push	 ax
1   269	    00FF  52				 push	 dx
1   270
1   271	    0100  BA 002C			 mov	 dx, 2Ch
1   272	    0103  B8 0200			 mov	 ax, 0200h
1   273	    0106  CD 21				 int	 21h
1   274
1   275	    0108  5A				 pop	 dx
1   276	    0109  58				 pop	 ax
1   277	    010A  C3				 ret
1   278	    010B			 print_comma endp
1   279
1   280	    010B			 CRLF proc
1   281
1   282	    010B  50				 push	 ax
1   283	    010C  52				 push	 dx
1   284
1   285	    010D  BA 000D			 mov	 dx, 13
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 6
a.asm



1   286	    0110  B8 0200			 mov	 ax, 0200h
1   287	    0113  CD 21				 int	 21h
1   288	    0115  BA 000A			 mov	 dx, 10
1   289	    0118  B8 0200			 mov	 ax, 0200h
1   290	    011B  CD 21				 int	 21h
1   291
1   292	    011D  5A				 pop	 dx
1   293	    011E  58				 pop	 ax
1   294	    011F  C3				 ret
1   295	    0120			 CRLF endp
1   296
1   297	    0120			 print_open_bracket proc
1   298
1   299	    0120  50				 push	 ax
1   300	    0121  52				 push	 dx
1   301
1   302	    0122  BA 005B			 mov	 dx, 5Bh
1   303	    0125  B8 0200			 mov	 ax, 0200h
1   304	    0128  CD 21				 int	 21h
1   305
1   306	    012A  5A				 pop	 dx
1   307	    012B  58				 pop	 ax
1   308	    012C  C3				 ret
1   309	    012D			 print_open_bracket endp
1   310
1   311	    012D			 print_close_bracket proc
1   312
1   313	    012D  50				 push	 ax
1   314	    012E  52				 push	 dx
1   315
1   316	    012F  BA 005D			 mov	 dx, 5Dh
1   317	    0132  B8 0200			 mov	 ax, 0200h
1   318	    0135  CD 21				 int	 21h
1   319
1   320	    0137  5A				 pop	 dx
1   321	    0138  58				 pop	 ax
1   322	    0139  C3				 ret
1   323	    013A			 print_close_bracket endp
1   324
1   325	    013A			 print_colon proc
1   326
1   327	    013A  50				 push	 ax
1   328	    013B  52				 push	 dx
1   329
1   330	    013C  BA 003A			 mov	 dx, 3ah
1   331	    013F  B8 0200			 mov	 ax, 0200h
1   332	    0142  CD 21				 int	 21h
1   333
1   334	    0144  5A				 pop	 dx
1   335	    0145  58				 pop	 ax
1   336	    0146  C3				 ret
1   337	    0147			 print_colon endp
1   338
1   339
    340						 include Task2.inc
1   341					 ; Check squaren matrix	for upper-triangle
1   342
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 7
a.asm



1   343	    0147			 get_element proc
1   344						 ; a[i][j] = a + (i*N +	j)*sizeint
1   345	    0147  55				 push	 bp
1   346	    0148  53				 push	 bx
1   347	    0149  51				 push	 cx
1   348	    014A  56				 push	 si
1   349
1   350	    014B  8B EC				 mov	 bp, sp
1   351	    014D  8B 76	10			 mov	 si, [bp+16]		 ; offset[matrix]
1   352	    0150  8B 4E	0E			 mov	 cx, [bp+14]		 ; N
1   353	    0153  8B 46	0C			 mov	 ax, [bp+12]		 ; i
1   354	    0156  8B 5E	0A			 mov	 bx, [bp+10]		 ; j
1   355
1   356	    0159  0F AF	C1			 imul	 ax, cx		 ; (i*N
1   357	    015C  03 C3				 add	 ax, bx		 ; + j)
1   358	    015E  D1 E0				 shl	 ax, 1		 ; * 2
1   359	    0160  03 F0				 add	 si, ax		 ; + matrix_begin
1   360	    0162  8B 04				 mov	 ax, [si]
1   361
1   362	    0164  5E				 pop	 si
1   363	    0165  59				 pop	 cx
1   364	    0166  5B				 pop	 bx
1   365	    0167  5D				 pop	 bp
1   366	    0168  C3				 ret
1   367	    0169			 get_element endp
1   368
1   369
1   370	    0169			 check_upper_triangle proc
1   371	    0169  55				 push	 bp
1   372	    016A  53				 push	 bx
1   373	    016B  51				 push	 cx
1   374	    016C  56				 push	 si
1   375	    016D  57				 push	 di
1   376
1   377	    016E  8B EC				 mov	 bp, sp
1   378	    0170  8B 5E	0E			 mov	 bx, [bp+14]	 ; matrix
1   379	    0173  8B 4E	0C			 mov	 cx, [bp+12]	 ; N
1   380
1   381	    0176  33 F6				 xor	 si, si		 ; Обнуляем счетчик
1   382	    0178				  for_si_0_to_cx:
1   383						 ;{
1   384	    0178  33 FF					 xor	 di, di
1   385	    017A  3B FE					 cmp	 di, si
1   386	    017C  7D 14					 jge	 next_si
1   387
1   388	    017E					  for_di_0_to_si:
1   389							 ;{
1   390
1   391	    017E  53						 push	 bx
1   392	    017F  51						 push	 cx	 ; N
1   393	    0180  56						 push	 si	 ; i
1   394	    0181  57						 push	 di	 ; j
1   395	    0182  E8 FFC2					 call	 get_element ; -> ax
1   396	    0185  5F						 pop di
1   397	    0186  5E						 pop si
1   398	    0187  59						 pop cx
1   399	    0188  5B						 pop bx
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 8
a.asm



1   400
1   401								 ;push ax
1   402								 ;call print_int2
1   403								 ;pop ax
1   404								 ;call print_space
1   405	    0189  85 C0						 test	 ax, ax
1   406	    018B  75 0C						 jnz	 CUT_no
1   407
1   408	    018D  47						 inc	 di
1   409	    018E  3B FE						 cmp	 di, si
1   410	    0190  7C EC						 jl	 for_di_0_to_si
1   411							 ;}
1   412	    0192					 next_si:
1   413	    0192  46					 inc	 si
1   414	    0193  3B F1					 cmp	 si, cx
1   415	    0195  7C E1					 jl	 for_si_0_to_cx
1   416						 ;}
1   417	    0197  EB 05				 jmp	 CUT_yes
1   418
1   419	    0199				  CUT_no:
1   420	    0199  B8 0000				 mov	 ax, 0
1   421	    019C  EB 05					 jmp	 CUT_end
1   422	    019E				  CUT_yes:
1   423	    019E  B8 0001				 mov	 ax, 1
1   424	    01A1  EB 00					 jmp	 CUT_end
1   425
1   426	    01A3				  CUT_end:
1   427	    01A3  5F					 pop	 di
1   428	    01A4  5E					 pop	 si
1   429	    01A5  59					 pop	 cx
1   430	    01A6  5B					 pop	 bx
1   431	    01A7  5D					 pop	 bp
1   432	    01A8  C3					 ret
1   433	    01A9			 check_upper_triangle endp
1   434
    435
    436	    01A9				 main proc
    437	    01A9  B8 0000s				 mov	 ax, data	 ; Loading
    438	    01AC  8E D8					 mov	 ds, ax		 ; data	segment
    439
    440	    01AE  68 0000r				 push	 offset[matrix]
    441	    01B1  FF 36	0012r				 push	 N
    442	    01B5  E8 FFB1				 call	 check_upper_triangle
    443	    01B8  E8 FF50				 call	 CRLF
    444	    01BB  E8 FF4D				 call	 CRLF
    445
    446	    01BE  85 C0					 test	 ax, ax
    447	    01C0  74 0A					 jz	 answer_no
    448
    449	    01C2					 answer_yes:
    450	    01C2  B8 0900					 mov	 ax, 0900h	 ; Печать	символов до '$'
    451	    01C5  BA 0014r					 mov	 dx,offset msg_y ; Сообщение
    452	    01C8  CD 21						 int	 21h		 ;
    453	    01CA  EB 0A						 jmp	 endz
    454
    455	    01CC					 answer_no:
    456	    01CC  B8 0900					 mov	 ax, 0900h	 ; Печать	символов до '$'
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 9
a.asm



    457	    01CF  BA 0033r					 mov	 dx,offset msg_n ; Сообщение
    458	    01D2  CD 21						 int	 21h		 ;
    459	    01D4  EB 00						 jmp	 endz
    460
    461	    01D6				  endz:
    462	    01D6  B8 4C00				 mov	 ax, 4c00h
    463	    01D9  CD 21					 int	 21h
    464	    01DB				 main endp
    465	    01DB			 code ends
    466
    467					 end main
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 10
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/12/14"
??FILENAME		Text   "a	"
??TIME			Text   "20:17:55"
??VERSION		Number 0314
@CPU			Text   0F0FH			   #1
@CURSEG			Text   CODE			   #5  #10  #28
@FILENAME		Text   A
@WORDSIZE		Text   2			   #1  #5  #10	#28
ANSWER_NO		Near   CODE:01CC		   447	#455
ANSWER_YES		Near   CODE:01C2		   #449
ARRAY_IS_EMPTY		Near   CODE:00D4		   155	#176
BIG_INT			Near   CODE:0034		   49  53  #63	88
CHECK_UPPER_TRIANGLE	Near   CODE:0169		   #370	 442
CRLF			Near   CODE:010B		   173	179  #280  443	444
CUT_END			Near   CODE:01A3		   421	424  #426
CUT_NO			Near   CODE:0199		   406	#419
CUT_YES			Near   CODE:019E		   417	#422
ENDZ			Near   CODE:01D6		   453	459  #461
END_ALL			Near   CODE:005C		   58  62  #89
END_LOOP		Near   CODE:0023		   #54	72  75
END_PRINT_INT2_ARRAY	Near   CODE:00DF		   174	180  #182
FOR_DI_0_TO_SI		Near   CODE:017E		   #388	 410
FOR_SI_0_TO_CX		Near   CODE:0178		   #382	 415
GET_ELEMENT		Near   CODE:0147		   #343	 395
MAIN			Near   CODE:01A9		   #436	 467
MATRIX			Word   DATA:0000		   #11	440
MSG_N			Byte   DATA:0033		   #20	457
MSG_Y			Byte   DATA:0014		   #15	451
N			Word   DATA:0012		   #14	441
NEGATIVE		Near   CODE:0019		   44  #50
NEGATIVE_1		Near   CODE:002D		   56  #59
NEXT_SI			Near   CODE:0192		   386	#412
OI1			Near   CODE:007A		   107	#115
OI2			Near   CODE:007F		   #118	 124
OI3			Near   CODE:008B		   #126	 130
POSITIVE		Near   CODE:0011		   45  #46
PRINT_BACKSPACE		Near   CODE:00F1		   170	171  #252
PRINT_CLOSE_BRACKET	Near   CODE:012D		   172	178  #311
PRINT_COLON		Near   CODE:013A		   #325
PRINT_COMMA		Near   CODE:00FE		   161	#266
PRINT_END		Near   CODE:00C6		   166	#169
PRINT_INT2		Near   CODE:0060		   #96	160
PRINT_INT2_ARRAY	Near   CODE:009C		   #141
PRINT_LOOP		Near   CODE:00B2		   #158	 167
PRINT_OPEN_BRACKET	Near   CODE:0120		   157	177  #297
PRINT_SPACE		Near   CODE:00E4		   162	#238
READ_INT2		Near   CODE:0000		   #33
READ_INT2_MATRIX	Near   CODE:00E3		   #189
TEMP			Number [STACKSEG:BP-0002]	   #38	48  52	57  60	77  80	87
Turbo Assembler	 Version 3.2	    12/12/14 20:17:56	    Page 11
Symbol Table




Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

CODE			16  01DB Para	none		   2  #28
DATA			16  0056 Para	none		   2  #10  437
STACKSEG		16  0100 Para	Stack		   2  #5
