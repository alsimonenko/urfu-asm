Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 1
a.asm



      1				     .286
      2				     .287
      3
      4
      5				     assume cs:	cseg, ds: dseg,	ss:sseg
      6
      7	0000			     sseg segment stack
      8	0000  0100*(??)			     db	256 dup	(?)
      9	0100			     sseg ends
     10
     11	0000			     dseg segment
     12	0000  40C00000			     a dd 6.0
     13	0004  3DE147AE			     b dd 0.11
     14	0008  40000000			     k1	dd 2.0
     15	000C  40400000			     k2	dd 3.0
     16	0010  00000000			     x dd 0.0
     17
     18	0014			     dseg ends
     19
     20	0000			     cseg segment
     21
     22	0000			     f1	proc					  ; ÔÂ‚‡ˇ ÙÛÌÍˆËˇ - ‚ÓÁ‚Â‰ÂÌËÂ	‚ Í‚‡‰‡Ú
     23	0000  D9 06 0010r		     fld x
     24	0004  DE C9			     fmulp st(1), st;
     25	0006  C3			     ret
     26	0007			     f1	endp
     27
     28	0007			     f2	proc					;‚ÚÓ‡ˇ	ÙÛÌÍˆËˇ	-k1* ı
     29	0007  D9 06 0008r		     fld k1
     30	000B  DE C9			     fmulp st(1), st
     31	000D  C3			     ret
     32	000E			     f2	endp
     33
     34	000E			     f3	proc					 ;ÚÂÚ¸ˇ
     35	000E  D9 06 000Cr		     fld k2
     36	0012  DE C9			     fmulp st(1), st
     37	0014  DE C1			     fadd
     38	0016  C3			     ret
     39	0017			     f3	endp
     40
     41				     include IntLib.inc
1    42				     ;requires include SexyPrnt.inc
1    43
1    44	0017			     read_int2 proc
1    45	0017  53			     push    bx
1    46	0018  51			     push    cx
1    47	0019  52			     push    dx
1    48
1    49					     local   temp:word ; –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
1    50	001A  33 C0			     xor     ax, ax    ; ax = 0	–¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
1    51	001C  33 DB			     xor     bx, bx    ; bx = 0	–¥–ª—è –∑–Ω–∞–∫–∞
1    52	001E  CD 16			     int     16h       ; getch
1    53	0020  32 E4			     xor     ah, ah
1    54	0022  3C 2D			     cmp     al, 45    ; char '-'
1    55	0024  74 0A			     je	     negative
1    56	0026  EB 00			     jmp     positive
1    57	0028			      positive:
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 2
a.asm



1    58	0028  2D 0030			     sub     ax, 48
1    59	002B  89 46 FE			     mov     temp, ax
1    60	002E  EB 1B			     jmp     big_int
1    61	0030			      negative:
1    62	0030  BB 0001			     mov     bx, 1
1    63	0033  C7 46 FE 0000		     mov     temp, 0
1    64	0038  EB 11			     jmp     big_int
1    65	003A			      end_loop:
1    66	003A  83 FB 01			     cmp     bx, 1
1    67	003D  74 05			     je	     negative_1
1    68	003F  8B 46 FE			     mov     ax, temp
1    69	0042  EB 2F			     jmp     end_all
1    70	0044			      negative_1:
1    71	0044  8B 46 FE			     mov     ax, temp
1    72	0047  F7 D8			     neg     ax
1    73	0049  EB 28			     jmp     end_all
1    74	004B			      big_int:
1    75	004B  B8 0000			     mov     ax, 0
1    76	004E  CD 16			     int     16h     ; getch
1    77	0050  32 E4			     xor     ah, ah
1    78					     ;mov dx, ax
1    79					     ;int 21h
1    80	0052  2D 0030			     sub     ax, 48
1    81	0055  B9 0009			     mov     cx, 9
1    82	0058  3B C1			     cmp     ax, cx
1    83	005A  7F DE			     jg	     end_loop
1    84	005C  B9 0000			     mov     cx, 0
1    85	005F  3B C1			     cmp     ax, cx
1    86	0061  7C D7			     jl	     end_loop
1    87
1    88	0063  8B 4E FE			     mov     cx, temp
1    89	0066  6B C9 0A			     imul    cx, 10
1    90	0069  03 C8			     add     cx, ax
1    91	006B  89 4E FE			     mov     temp, cx
1    92					     ;	 mov cx, ax
1    93					     ;	 mov ax, temp
1    94					     ;	 mov bx, 10
1    95					     ;	 imul bx
1    96					     ;	 add ax, cx
1    97					     ;	 mov temp, ax
1    98	006E  8B 46 FE			     mov     ax, temp
1    99	0071  EB D8			     jmp     big_int
1   100	0073			      end_all:
1   101	0073  5A			     pop     dx
1   102	0074  59			     pop     cx
1   103	0075  5B			     pop     bx
1   104	0076  C3			     ret
1   105	0077			     read_int2 endp
1   106
1   107				     ; read_int2_array proc
1   108
1   109				     ;	       call print_open_bracket
1   110				     ;	       xor  si,	si	    ; –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
1   111				     ;	       reading_cycle:
1   112				     ;		   call	read_int2
1   113				     ;		   mov	array[si], ax
1   114				     ;		   add	si, 2
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 3
a.asm



1   115				     ;		   call	print_int2
1   116				     ;		   call	print_comma
1   117				     ;		   call	print_space
1   118				     ;		   mov	ax, len
1   119				     ;		   shl	ax, 1
1   120				     ;		   cmp	si, ax
1   121				     ;		   jl	reading_cycle
1   122				     ;	       call print_backspace
1   123				     ;	       call print_backspace
1   124				     ;	       call print_close_bracket
1   125				     ;	       call CRLF
1   126
1   127				     ;	       ret
1   128				     ;	     ; push  bp
1   129				     ;	     ; push  ax
1   130				     ;	     ; push  bx
1   131				     ;	     ; ; total 6
1   132
1   133				     ;	     ; mov   bp, sp
1   134				     ;	     ; mov   si, [bp+10]   ; array
1   135				     ;	     ; mov   bx, [bp+8]	   ; len
1   136				     ;	     ; shl   bx, 1	   ; *size(int)	= 2
1   137				     ;	     ; add   bx, si	   ; +first addr
1   138
1   139				     ;	     ;	     mov ax,si
1   140				     ;	     ;	     call print_int2
1   141				     ;	     ;	     call print_space
1   142				     ;	     ;	     mov ax,bx
1   143				     ;	     ;	     call print_int2
1   144				     ;	     ;	     call print_space
1   145				     ;	     ; cmp     si, bx
1   146				     ;	     ; je      RA_array_is_empty
1   147
1   148				     ;	     ; call  print_open_bracket
1   149				     ;	; RA_read_loop:
1   150
1   151				     ;	     ;	     mov ax,si
1   152				     ;	     ;	     call print_int2
1   153				     ;	     ;	     call print_space
1   154				     ;	     ;	     mov ax,bx
1   155				     ;	     ;	     call print_int2
1   156				     ;	     ;	     call print_space
1   157				     ;	     ; call  read_int2
1   158				     ;	     ; mov   si, ax
1   159				     ;	     ; call  print_int2
1   160				     ;	     ; call  print_comma
1   161				     ;	     ; call  print_space
1   162
1   163				     ;	     ; add     si, 2
1   164				     ;	     ; cmp     si, bx
1   165				     ;	     ; je      RA_print_end
1   166				     ;	     ; jmp     RA_read_loop
1   167
1   168				     ;	; RA_print_end:
1   169				     ;	;    call    print_backspace
1   170				     ;	;    call    print_backspace
1   171				     ;	     ; call  print_close_bracket
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 4
a.asm



1   172				     ;	     ; call  CRLF
1   173				     ;	     ; jmp   RA_end
1   174
1   175				     ;	; RA_array_is_empty:
1   176				     ;	;    call    print_open_bracket
1   177				     ;	     ; call  print_close_bracket
1   178				     ;	     ; call  CRLF
1   179				     ;	     ; jmp   RA_end
1   180
1   181				     ;	; RA_end:
1   182				     ;	     ; pop   bx
1   183				     ;	     ; pop   ax
1   184				     ;	     ; pop   bp
1   185				     ;	     ; ret
1   186				     ; read_int2_array endp
1   187
1   188	0077			     print_int2	proc
1   189	0077  50			     push    ax
1   190	0078  53			     push    bx
1   191	0079  51			     push    cx
1   192	007A  52			     push    dx
1   193
1   194	007B  85 C0			     test    ax, ax
1   195	007D  79 0C			     jns     oi1
1   196
1   197	007F  8B C8			     mov     cx, ax
1   198	0081  B4 02			     mov     ah, 02h
1   199	0083  B2 2D			     mov     dl, '-'
1   200	0085  CD 21			     int     21h
1   201	0087  8B C1			     mov     ax, cx
1   202	0089  F7 D8			     neg     ax
1   203	008B			      oi1:
1   204	008B  33 C9			     xor     cx, cx
1   205	008D  BB 000A			     mov     bx, 10
1   206	0090			      oi2:
1   207	0090  33 D2			     xor     dx,dx
1   208	0092  F7 F3			     div     bx
1   209	0094  52			     push    dx
1   210	0095  41			     inc     cx
1   211	0096  85 C0			     test    ax, ax
1   212	0098  75 F6			     jnz     oi2
1   213	009A  B4 02			     mov     ah, 02h
1   214	009C			      oi3:
1   215	009C  5A			     pop     dx
1   216	009D  80 C2 30			     add     dl, '0'
1   217	00A0  CD 21			     int     21h
1   218	00A2  E2 F8			     loop    oi3
1   219
1   220	00A4  5A			     pop     dx
1   221	00A5  59			     pop     cx
1   222	00A6  5B			     pop     bx
1   223	00A7  58			     pop     ax
1   224	00A8  C3			     ret
1   225	00A9			     print_int2	endp
1   226
1   227	00A9			     print_int2_array proc
1   228
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 5
a.asm



1   229	00A9  55			     push    bp
1   230	00AA  50			     push    ax
1   231	00AB  53			     push    bx
1   232					     ; total 6
1   233
1   234	00AC  8B EC			     mov     bp, sp
1   235	00AE  8B 76 0A			     mov     si, [bp+10]    ; array
1   236	00B1  8B 5E 08			     mov     bx, [bp+8]	   ; len
1   237	00B4  D1 E3			     shl     bx, 1	   ; *size(int)	= 2
1   238	00B6  03 DE			     add     bx, si	   ; +first addr
1   239
1   240	00B8  3B F3			     cmp     si, bx
1   241	00BA  74 25			     je	     PA_array_is_empty
1   242
1   243	00BC  E8 006D			     call    print_open_bracket
1   244	00BF			      PA_print_loop:
1   245	00BF  8B 04			     mov     ax, [si]	   ; current element
1   246	00C1  E8 FFB3			     call    print_int2
1   247	00C4  E8 0043			     call    print_comma
1   248	00C7  E8 0026			     call    print_space
1   249
1   250	00CA  83 C6 02			     add     si, 2
1   251	00CD  3B F3			     cmp     si, bx
1   252	00CF  74 02			     je	     PA_print_end
1   253	00D1  EB EC			     jmp     PA_print_loop
1   254
1   255	00D3			      PA_print_end:
1   256	00D3  E8 0027			     call    print_backspace
1   257	00D6  E8 0024			     call    print_backspace
1   258	00D9  E8 005D			     call    print_close_bracket
1   259	00DC  E8 0038			     call    CRLF
1   260	00DF  EB 0B			     jmp     PA_end
1   261
1   262	00E1			      PA_array_is_empty:
1   263	00E1  E8 0048			     call    print_open_bracket
1   264	00E4  E8 0052			     call    print_close_bracket
1   265	00E7  E8 002D			     call    CRLF
1   266	00EA  EB 00			     jmp     PA_end
1   267
1   268	00EC			      PA_end:
1   269	00EC  5B			     pop     bx
1   270	00ED  58			     pop     ax
1   271	00EE  5D			     pop     bp
1   272	00EF  C3			     ret
1   273	00F0			     print_int2_array endp
1   274
1   275
    276				     include SexyPrnt.inc
1   277				     ; v 1.0
1   278
1   279	00F0			     print_space proc
1   280	00F0  50			     push    ax
1   281	00F1  52			     push    dx
1   282
1   283	00F2  BA 0020			     mov     dx, 20h
1   284	00F5  B8 0200			     mov     ax, 0200h
1   285	00F8  CD 21			     int     21h
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 6
a.asm



1   286
1   287	00FA  5A			     pop     dx
1   288	00FB  58			     pop     ax
1   289	00FC  C3			     ret
1   290	00FD			     print_space endp
1   291
1   292	00FD			     print_backspace proc
1   293
1   294	00FD  50			     push    ax
1   295	00FE  52			     push    dx
1   296
1   297	00FF  BA 0008			     mov     dx, 08h
1   298	0102  B8 0200			     mov     ax, 0200h
1   299	0105  CD 21			     int     21h
1   300
1   301	0107  5A			     pop     dx
1   302	0108  58			     pop     ax
1   303	0109  C3			     ret
1   304	010A			     print_backspace endp
1   305
1   306	010A			     print_comma proc
1   307
1   308	010A  50			     push    ax
1   309	010B  52			     push    dx
1   310
1   311	010C  BA 002C			     mov     dx, 2Ch
1   312	010F  B8 0200			     mov     ax, 0200h
1   313	0112  CD 21			     int     21h
1   314
1   315	0114  5A			     pop     dx
1   316	0115  58			     pop     ax
1   317	0116  C3			     ret
1   318	0117			     print_comma endp
1   319
1   320	0117			     CRLF proc
1   321
1   322	0117  50			     push    ax
1   323	0118  52			     push    dx
1   324
1   325	0119  BA 000D			     mov     dx, 13
1   326	011C  B8 0200			     mov     ax, 0200h
1   327	011F  CD 21			     int     21h
1   328	0121  BA 000A			     mov     dx, 10
1   329	0124  B8 0200			     mov     ax, 0200h
1   330	0127  CD 21			     int     21h
1   331
1   332	0129  5A			     pop     dx
1   333	012A  58			     pop     ax
1   334	012B  C3			     ret
1   335	012C			     CRLF endp
1   336
1   337	012C			     print_open_bracket	proc
1   338
1   339	012C  50			     push    ax
1   340	012D  52			     push    dx
1   341
1   342	012E  BA 005B			     mov     dx, 5Bh
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 7
a.asm



1   343	0131  B8 0200			     mov     ax, 0200h
1   344	0134  CD 21			     int     21h
1   345
1   346	0136  5A			     pop     dx
1   347	0137  58			     pop     ax
1   348	0138  C3			     ret
1   349	0139			     print_open_bracket	endp
1   350
1   351	0139			     print_close_bracket proc
1   352
1   353	0139  50			     push    ax
1   354	013A  52			     push    dx
1   355
1   356	013B  BA 005D			     mov     dx, 5Dh
1   357	013E  B8 0200			     mov     ax, 0200h
1   358	0141  CD 21			     int     21h
1   359
1   360	0143  5A			     pop     dx
1   361	0144  58			     pop     ax
1   362	0145  C3			     ret
1   363	0146			     print_close_bracket endp
1   364
1   365
    366
    367	0146			     start:
    368	0146  B8 0000s			 mov ax, dseg
    369	0149  8E D8			     mov ds, ax
    370
    371	014B				     Begin:
    372	014B  9B DB E3				     finit
    373	014E  D9 06 0010r			     fld x    ;	‚ ÒÚÂÍ
    374	0152  D9 06 0000r			     fld a
    375	0156  D8 D9				     fcomp st(1) ; Ò‡‚ÌË‚‡ÂÚ
    376	0158  9B DF E0				     fstsw ax ;	Ú‡Ï ÓÒÓ·ÂÌÌ˚Â ÙÎ‡„Ë, ÍÓÚ Ï˚ ÔÂÂ‚Ó‰ËÏ
    377	015B  9E				     sahf     ;‚ Ó·˚˜Ì˚Â
    378	015C  77 05				     ja	pointer_f2orf3 ; x<a   Ë Ò‡‚ÌË‚‡ÂÏ
    379
    380	015E  E8 FE9F				     call f1 ;x>=a
    381	0161  EB 14				     jmp exit
    382
    383	0163					     pointer_f2orf3:
    384	0163  D9 06 0004r				     fld b
    385	0167  D8 D9					     fcomp st(1)
    386	0169  9B DF E0					     fstsw ax
    387	016C  9E					     sahf
    388	016D  77 05					     ja	pointer_f3
    389
    390	016F  E8 FE95					     call f2 ;b<=x<a
    391	0172  EB 03					     jmp exit
    392	0174					     pointer_f3:
    393	0174  E8 FE97					     call f3 ; x<b
    394
    395	0177					     exit:
    396
    397
    398
    399	0177  B8 4C00					     mov ax, 4c00h
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 8
a.asm



    400	017A  CD 21					     int 21h
    401	017C			     cseg ends
    402				     end start
Turbo Assembler	 Version 3.2	    12/24/14 10:38:35	    Page 9
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/24/14"
??FILENAME		Text   "a	"
??TIME			Text   "10:38:35"
??VERSION		Number 0314
@CPU			Text   0707H			   #1  #2
@CURSEG			Text   CSEG			   #7  #11  #20
@FILENAME		Text   A
@WORDSIZE		Text   2			   #1  #2  #7  #11  #20
A			Dword  DSEG:0000		   #12	374
B			Dword  DSEG:0004		   #13	384
BEGIN			Near   CSEG:014B		   #371
BIG_INT			Near   CSEG:004B		   60  64  #74	99
CRLF			Near   CSEG:0117		   259	265  #320
END_ALL			Near   CSEG:0073		   69  73  #100
END_LOOP		Near   CSEG:003A		   #65	83  86
EXIT			Near   CSEG:0177		   381	391  #395
F1			Near   CSEG:0000		   #22	380
F2			Near   CSEG:0007		   #28	390
F3			Near   CSEG:000E		   #34	393
K1			Dword  DSEG:0008		   #14	29
K2			Dword  DSEG:000C		   #15	35
NEGATIVE		Near   CSEG:0030		   55  #61
NEGATIVE_1		Near   CSEG:0044		   67  #70
OI1			Near   CSEG:008B		   195	#203
OI2			Near   CSEG:0090		   #206	 212
OI3			Near   CSEG:009C		   #214	 218
PA_ARRAY_IS_EMPTY	Near   CSEG:00E1		   241	#262
PA_END			Near   CSEG:00EC		   260	266  #268
PA_PRINT_END		Near   CSEG:00D3		   252	#255
PA_PRINT_LOOP		Near   CSEG:00BF		   #244	 253
POINTER_F2ORF3		Near   CSEG:0163		   378	#383
POINTER_F3		Near   CSEG:0174		   388	#392
POSITIVE		Near   CSEG:0028		   56  #57
PRINT_BACKSPACE		Near   CSEG:00FD		   256	257  #292
PRINT_CLOSE_BRACKET	Near   CSEG:0139		   258	264  #351
PRINT_COMMA		Near   CSEG:010A		   247	#306
PRINT_INT2		Near   CSEG:0077		   #188	 246
PRINT_INT2_ARRAY	Near   CSEG:00A9		   #227
PRINT_OPEN_BRACKET	Near   CSEG:012C		   243	263  #337
PRINT_SPACE		Near   CSEG:00F0		   248	#279
READ_INT2		Near   CSEG:0017		   #44
START			Near   CSEG:0146		   #367	 402
TEMP			Number [SSEG:BP-0002]		   #49	59  63	68  71	88  91	98
X			Dword  DSEG:0010		   #16	23  373

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

CSEG			16  017C Para	none		   5  #20
DSEG			16  0014 Para	none		   5  #11  368
SSEG			16  0100 Para	Stack		   5  #7
