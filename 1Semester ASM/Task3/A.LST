Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 1
a.asm



      1					 .386
      2					 assume	CS:code, DS:data, SS:stackseg
      3
      4
      5	    0000			 stackseg segment stack	use16
      6	    0000  0100*(??)			 db 256	dup (?)
      7	    0100			 stackseg ends
      8
      9
     10	    0000			 data	 segment use16
     11
     12	    0000  0100*(????)			 array	 dw	 256 dup (?)
     13	    0200  0000				 n		 dw	 (?)
     14	    0202  45 6E	74 65 72 20 6E+		 msg_1	 DB	 'Enter	n (<= 7):', 13,	10, 62,	32,'$'
     15		  20 28	3C 3D 20 37 29+
     16		  3A 0D	0A 3E 20 24
     17	    0216  46 61	63 74 6F 72 69+		 msg_2	 DB	 'Factorial is:', 13, 10, 62, 32,'$'
     18		  61 6C	20 69 73 3A 0D+
     19		  0A 3E	20 24
     20	    0228  49 6E	63 6F 72 72 65+		 msg_e	 DB	 'Incorrect n (must be in [0...7]). Exiting...', 13, 10,'$'
     21		  63 74	20 6E 20 28 6D+
     22		  75 73	74 20 62 65 20+
     23		  69 6E	20 5B 30 2E 2E+
     24		  2E 37	5D 29 2E 20 45+
     25		  78 69	74 69 6E 67 2E+
     26		  2E 2E	0D 0A 24
     27	    0257			 data	 ends
     28
     29
     30	    0000			 code segment use16
     31
     32						 include IntLib.inc
1    33					 ;requires include SexyPrnt.inc
1    34
1    35	    0000			 read_int2 proc
1    36	    0000  53				 push	 bx
1    37	    0001  51				 push	 cx
1    38	    0002  52				 push	 dx
1    39
1    40						 local	 temp:word ; локальная	переменная
1    41	    0003  33 C0				 xor	 ax, ax	   ; ax	= 0 для символов
1    42	    0005  33 DB				 xor	 bx, bx	   ; bx	= 0 для знака
1    43	    0007  CD 16				 int	 16h	   ; getch
1    44	    0009  32 E4				 xor	 ah, ah
1    45	    000B  3C 2D				 cmp	 al, 45	   ; char '-'
1    46	    000D  74 0A				 je	 negative
1    47	    000F  EB 00				 jmp	 positive
1    48	    0011			  positive:
1    49	    0011  2D 0030			 sub	 ax, 48
1    50	    0014  89 46	FE			 mov	 temp, ax
1    51	    0017  EB 1B				 jmp	 big_int
1    52	    0019			  negative:
1    53	    0019  BB 0001			 mov	 bx, 1
1    54	    001C  C7 46	FE 0000			 mov	 temp, 0
1    55	    0021  EB 11				 jmp	 big_int
1    56	    0023			  end_loop:
1    57	    0023  83 FB	01			 cmp	 bx, 1
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 2
a.asm



1    58	    0026  74 05				 je	 negative_1
1    59	    0028  8B 46	FE			 mov	 ax, temp
1    60	    002B  EB 2F				 jmp	 end_all
1    61	    002D			  negative_1:
1    62	    002D  8B 46	FE			 mov	 ax, temp
1    63	    0030  F7 D8				 neg	 ax
1    64	    0032  EB 28				 jmp	 end_all
1    65	    0034			  big_int:
1    66	    0034  B8 0000			 mov	 ax, 0
1    67	    0037  CD 16				 int	 16h	 ; getch
1    68	    0039  32 E4				 xor	 ah, ah
1    69						 ;mov dx, ax
1    70						 ;int 21h
1    71	    003B  2D 0030			 sub	 ax, 48
1    72	    003E  B9 0009			 mov	 cx, 9
1    73	    0041  3B C1				 cmp	 ax, cx
1    74	    0043  7F DE				 jg	 end_loop
1    75	    0045  B9 0000			 mov	 cx, 0
1    76	    0048  3B C1				 cmp	 ax, cx
1    77	    004A  7C D7				 jl	 end_loop
1    78
1    79	    004C  8B 4E	FE			 mov	 cx, temp
1    80	    004F  6B C9	0A			 imul	 cx, 10
1    81	    0052  03 C8				 add	 cx, ax
1    82	    0054  89 4E	FE			 mov	 temp, cx
1    83						 ;   mov cx, ax
1    84						 ;   mov ax, temp
1    85						 ;   mov bx, 10
1    86						 ;   imul bx
1    87						 ;   add ax, cx
1    88						 ;   mov temp, ax
1    89	    0057  8B 46	FE			 mov	 ax, temp
1    90	    005A  EB D8				 jmp	 big_int
1    91	    005C			  end_all:
1    92	    005C  5A				 pop	 dx
1    93	    005D  59				 pop	 cx
1    94	    005E  5B				 pop	 bx
1    95	    005F  C3				 ret
1    96	    0060			 read_int2 endp
1    97
1    98					 ; read_int2_array proc
1    99
1   100					 ;	   call	print_open_bracket
1   101					 ;	   xor	si, si		; Обнуляем счетчик
1   102					 ;	   reading_cycle:
1   103					 ;	       call read_int2
1   104					 ;	       mov  array[si], ax
1   105					 ;	       add  si,	2
1   106					 ;	       call print_int2
1   107					 ;	       call print_comma
1   108					 ;	       call print_space
1   109					 ;	       mov  ax,	len
1   110					 ;	       shl  ax,	1
1   111					 ;	       cmp  si,	ax
1   112					 ;	       jl   reading_cycle
1   113					 ;	   call	print_backspace
1   114					 ;	   call	print_backspace
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 3
a.asm



1   115					 ;	   call	print_close_bracket
1   116					 ;	   call	CRLF
1   117
1   118					 ;	   ret
1   119					 ;	 ; push	 bp
1   120					 ;	 ; push	 ax
1   121					 ;	 ; push	 bx
1   122					 ;	 ; ; total 6
1   123
1   124					 ;	 ; mov	 bp, sp
1   125					 ;	 ; mov	 si, [bp+10]   ; array
1   126					 ;	 ; mov	 bx, [bp+8]    ; len
1   127					 ;	 ; shl	 bx, 1	       ; *size(int) = 2
1   128					 ;	 ; add	 bx, si	       ; +first	addr
1   129
1   130					 ;	 ;	 mov ax,si
1   131					 ;	 ;	 call print_int2
1   132					 ;	 ;	 call print_space
1   133					 ;	 ;	 mov ax,bx
1   134					 ;	 ;	 call print_int2
1   135					 ;	 ;	 call print_space
1   136					 ;	 ; cmp	   si, bx
1   137					 ;	 ; je	   RA_array_is_empty
1   138
1   139					 ;	 ; call	 print_open_bracket
1   140					 ;  ; RA_read_loop:
1   141
1   142					 ;	 ;	 mov ax,si
1   143					 ;	 ;	 call print_int2
1   144					 ;	 ;	 call print_space
1   145					 ;	 ;	 mov ax,bx
1   146					 ;	 ;	 call print_int2
1   147					 ;	 ;	 call print_space
1   148					 ;	 ; call	 read_int2
1   149					 ;	 ; mov	 si, ax
1   150					 ;	 ; call	 print_int2
1   151					 ;	 ; call	 print_comma
1   152					 ;	 ; call	 print_space
1   153
1   154					 ;	 ; add	   si, 2
1   155					 ;	 ; cmp	   si, bx
1   156					 ;	 ; je	   RA_print_end
1   157					 ;	 ; jmp	   RA_read_loop
1   158
1   159					 ;  ; RA_print_end:
1   160					 ;  ;	 call	 print_backspace
1   161					 ;  ;	 call	 print_backspace
1   162					 ;	 ; call	 print_close_bracket
1   163					 ;	 ; call	 CRLF
1   164					 ;	 ; jmp	 RA_end
1   165
1   166					 ;  ; RA_array_is_empty:
1   167					 ;  ;	 call	 print_open_bracket
1   168					 ;	 ; call	 print_close_bracket
1   169					 ;	 ; call	 CRLF
1   170					 ;	 ; jmp	 RA_end
1   171
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 4
a.asm



1   172					 ;  ; RA_end:
1   173					 ;	 ; pop	 bx
1   174					 ;	 ; pop	 ax
1   175					 ;	 ; pop	 bp
1   176					 ;	 ; ret
1   177					 ; read_int2_array endp
1   178
1   179	    0060			 print_int2 proc
1   180	    0060  50				 push	 ax
1   181	    0061  53				 push	 bx
1   182	    0062  51				 push	 cx
1   183	    0063  52				 push	 dx
1   184
1   185	    0064  85 C0				 test	 ax, ax
1   186	    0066  79 0C				 jns	 oi1
1   187
1   188	    0068  8B C8				 mov	 cx, ax
1   189	    006A  B4 02				 mov	 ah, 02h
1   190	    006C  B2 2D				 mov	 dl, '-'
1   191	    006E  CD 21				 int	 21h
1   192	    0070  8B C1				 mov	 ax, cx
1   193	    0072  F7 D8				 neg	 ax
1   194	    0074			  oi1:
1   195	    0074  33 C9				 xor	 cx, cx
1   196	    0076  BB 000A			 mov	 bx, 10
1   197	    0079			  oi2:
1   198	    0079  33 D2				 xor	 dx,dx
1   199	    007B  F7 F3				 div	 bx
1   200	    007D  52				 push	 dx
1   201	    007E  41				 inc	 cx
1   202	    007F  85 C0				 test	 ax, ax
1   203	    0081  75 F6				 jnz	 oi2
1   204	    0083  B4 02				 mov	 ah, 02h
1   205	    0085			  oi3:
1   206	    0085  5A				 pop	 dx
1   207	    0086  80 C2	30			 add	 dl, '0'
1   208	    0089  CD 21				 int	 21h
1   209	    008B  E2 F8				 loop	 oi3
1   210
1   211	    008D  5A				 pop	 dx
1   212	    008E  59				 pop	 cx
1   213	    008F  5B				 pop	 bx
1   214	    0090  58				 pop	 ax
1   215	    0091  C3				 ret
1   216	    0092			 print_int2 endp
1   217
1   218	    0092			 print_int2_array proc
1   219
1   220	    0092  55				 push	 bp
1   221	    0093  50				 push	 ax
1   222	    0094  53				 push	 bx
1   223						 ; total 6
1   224
1   225	    0095  8B EC				 mov	 bp, sp
1   226	    0097  8B 76	0A			 mov	 si, [bp+10]	; array
1   227	    009A  8B 5E	08			 mov	 bx, [bp+8]    ; len
1   228	    009D  D1 E3				 shl	 bx, 1	       ; *size(int) = 2
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 5
a.asm



1   229	    009F  03 DE				 add	 bx, si	       ; +first	addr
1   230
1   231	    00A1  3B F3				 cmp	 si, bx
1   232	    00A3  74 25				 je	 PA_array_is_empty
1   233
1   234	    00A5  E8 006D			 call	 print_open_bracket
1   235	    00A8			  PA_print_loop:
1   236	    00A8  8B 04				 mov	 ax, [si]      ; current element
1   237	    00AA  E8 FFB3			 call	 print_int2
1   238	    00AD  E8 0043			 call	 print_comma
1   239	    00B0  E8 0026			 call	 print_space
1   240
1   241	    00B3  83 C6	02			 add	 si, 2
1   242	    00B6  3B F3				 cmp	 si, bx
1   243	    00B8  74 02				 je	 PA_print_end
1   244	    00BA  EB EC				 jmp	 PA_print_loop
1   245
1   246	    00BC			  PA_print_end:
1   247	    00BC  E8 0027			 call	 print_backspace
1   248	    00BF  E8 0024			 call	 print_backspace
1   249	    00C2  E8 005D			 call	 print_close_bracket
1   250	    00C5  E8 0038			 call	 CRLF
1   251	    00C8  EB 0B				 jmp	 PA_end
1   252
1   253	    00CA			  PA_array_is_empty:
1   254	    00CA  E8 0048			 call	 print_open_bracket
1   255	    00CD  E8 0052			 call	 print_close_bracket
1   256	    00D0  E8 002D			 call	 CRLF
1   257	    00D3  EB 00				 jmp	 PA_end
1   258
1   259	    00D5			  PA_end:
1   260	    00D5  5B				 pop	 bx
1   261	    00D6  58				 pop	 ax
1   262	    00D7  5D				 pop	 bp
1   263	    00D8  C3				 ret
1   264	    00D9			 print_int2_array endp
1   265
1   266
    267						 include SexyPrnt.inc
1   268					 ; v 1.0
1   269
1   270	    00D9			 print_space proc
1   271	    00D9  50				 push	 ax
1   272	    00DA  52				 push	 dx
1   273
1   274	    00DB  BA 0020			 mov	 dx, 20h
1   275	    00DE  B8 0200			 mov	 ax, 0200h
1   276	    00E1  CD 21				 int	 21h
1   277
1   278	    00E3  5A				 pop	 dx
1   279	    00E4  58				 pop	 ax
1   280	    00E5  C3				 ret
1   281	    00E6			 print_space endp
1   282
1   283	    00E6			 print_backspace proc
1   284
1   285	    00E6  50				 push	 ax
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 6
a.asm



1   286	    00E7  52				 push	 dx
1   287
1   288	    00E8  BA 0008			 mov	 dx, 08h
1   289	    00EB  B8 0200			 mov	 ax, 0200h
1   290	    00EE  CD 21				 int	 21h
1   291
1   292	    00F0  5A				 pop	 dx
1   293	    00F1  58				 pop	 ax
1   294	    00F2  C3				 ret
1   295	    00F3			 print_backspace endp
1   296
1   297	    00F3			 print_comma proc
1   298
1   299	    00F3  50				 push	 ax
1   300	    00F4  52				 push	 dx
1   301
1   302	    00F5  BA 002C			 mov	 dx, 2Ch
1   303	    00F8  B8 0200			 mov	 ax, 0200h
1   304	    00FB  CD 21				 int	 21h
1   305
1   306	    00FD  5A				 pop	 dx
1   307	    00FE  58				 pop	 ax
1   308	    00FF  C3				 ret
1   309	    0100			 print_comma endp
1   310
1   311	    0100			 CRLF proc
1   312
1   313	    0100  50				 push	 ax
1   314	    0101  52				 push	 dx
1   315
1   316	    0102  BA 000D			 mov	 dx, 13
1   317	    0105  B8 0200			 mov	 ax, 0200h
1   318	    0108  CD 21				 int	 21h
1   319	    010A  BA 000A			 mov	 dx, 10
1   320	    010D  B8 0200			 mov	 ax, 0200h
1   321	    0110  CD 21				 int	 21h
1   322
1   323	    0112  5A				 pop	 dx
1   324	    0113  58				 pop	 ax
1   325	    0114  C3				 ret
1   326	    0115			 CRLF endp
1   327
1   328	    0115			 print_open_bracket proc
1   329
1   330	    0115  50				 push	 ax
1   331	    0116  52				 push	 dx
1   332
1   333	    0117  BA 005B			 mov	 dx, 5Bh
1   334	    011A  B8 0200			 mov	 ax, 0200h
1   335	    011D  CD 21				 int	 21h
1   336
1   337	    011F  5A				 pop	 dx
1   338	    0120  58				 pop	 ax
1   339	    0121  C3				 ret
1   340	    0122			 print_open_bracket endp
1   341
1   342	    0122			 print_close_bracket proc
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 7
a.asm



1   343
1   344	    0122  50				 push	 ax
1   345	    0123  52				 push	 dx
1   346
1   347	    0124  BA 005D			 mov	 dx, 5Dh
1   348	    0127  B8 0200			 mov	 ax, 0200h
1   349	    012A  CD 21				 int	 21h
1   350
1   351	    012C  5A				 pop	 dx
1   352	    012D  58				 pop	 ax
1   353	    012E  C3				 ret
1   354	    012F			 print_close_bracket endp
1   355
1   356
    357						 include Task3.inc
1   358
1   359	    012F			 factorial proc
1   360
1   361	    012F  55				 push	 bp
1   362	    0130  53				 push	 bx
1   363						 ; total 4
1   364
1   365	    0131  8B EC				 mov	 bp, sp
1   366	    0133  8B 46	06			 mov	 ax, [bp+6]	 ; n
1   367
1   368						 ; recursion base
1   369	    0136  85 C0				 test	 ax, ax
1   370	    0138  74 0B				 jz		 n_equals_0
1   371
1   372						 ; recursion step
1   373	    013A  8B D8					 mov		 bx, ax
1   374	    013C  48					 dec		 ax
1   375	    013D  50					 push	 ax
1   376	    013E  E8 FFEE				 call	 factorial	 ; ax =	fact(n-1)
1   377	    0141  F7 E3					 mul		 bx			 ; ax =	fact(n-1) * n
1   378	    0143  EB 05					 jmp		 factorial_end
1   379
1   380	    0145				 n_equals_0:
1   381	    0145  B8 0001				 mov		 ax, 1		 ; ax =	1
1   382	    0148  EB 00					 jmp		 factorial_end
1   383
1   384	    014A				 factorial_end:
1   385	    014A  5B					 pop	 bx
1   386	    014B  5D					 pop	 bp
1   387	    014C  C2 0002				 ret		 2
1   388	    014F			 endp factorial
1   389
    390
    391
    392	    014F			  main proc
    393	    014F  B8 0000s			 mov	 ax, data	 ; Loading
    394	    0152  8E D8				 mov	 ds, ax		 ; data	segment
    395
    396	    0154  B8 0900			 mov	 ax, 0900h
    397	    0157  BA 0202r			 mov	 dx,offset msg_1 ; Сообщение1 'Введите n'
    398	    015A  CD 21				 int	 21h		 ;
    399
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 8
a.asm



    400	    015C  E8 FEA1			 call	 read_int2	 ; reads_int, returns to ax
    401	    015F  A3 0200r			 mov	 n, ax
    402	    0162  E8 FEFB			 call	 print_int2	 ; prints int from ax
    403	    0165  E8 FF98			 call	 CRLF
    404
    405						 ; Проверка корректности n
    406	    0168  83 3E	0200r 00		 cmp	 n, 0
    407	    016D  7C 1B				 jl		 incorrect_n
    408	    016F  83 3E	0200r 07		 cmp	 n, 7
    409	    0174  7F 14				 jg		 incorrect_n
    410
    411	    0176  B8 0900			 mov	 ax, 0900h
    412	    0179  BA 0216r			 mov	 dx,offset msg_2 ; Сообщение 'Факториал равен'
    413	    017C  CD 21				 int	 21h
    414
    415	    017E  FF 36	0200r			 push	 n
    416	    0182  E8 FFAA			 call	 factorial
    417
    418	    0185  E8 FED8			 call	 print_int2
    419	    0188  EB 0A				 jmp		 endz
    420
    421	    018A				 incorrect_n:
    422	    018A  B8 0900				 mov	 ax, 0900h
    423	    018D  BA 0228r				 mov	 dx,offset msg_e ; Сообщение об ошибке
    424	    0190  CD 21					 int	 21h
    425	    0192  EB 00					 jmp		 endz
    426
    427	    0194				 endz:
    428	    0194  B8 4C00			 mov	 ax, 4c00h
    429	    0197  CD 21				 int	 21h
    430	    0199			  main	 endp
    431	    0199			 code	 ends
    432
    433					 end	 main
Turbo Assembler	 Version 3.2	    12/12/14 20:44:55	    Page 9
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/12/14"
??FILENAME		Text   "a	"
??TIME			Text   "20:44:54"
??VERSION		Number 0314
@CPU			Text   0F0FH			   #1
@CURSEG			Text   CODE			   #5  #10  #30
@FILENAME		Text   A
@WORDSIZE		Text   2			   #1  #5  #10	#30
ARRAY			Word   DATA:0000		   #12
BIG_INT			Near   CODE:0034		   51  55  #65	90
CRLF			Near   CODE:0100		   250	256  #311  403
ENDZ			Near   CODE:0194		   419	425  #427
END_ALL			Near   CODE:005C		   60  64  #91
END_LOOP		Near   CODE:0023		   #56	74  77
FACTORIAL		Near   CODE:012F		   #359	 376  416
FACTORIAL_END		Near   CODE:014A		   378	382  #384
INCORRECT_N		Near   CODE:018A		   407	409  #421
MAIN			Near   CODE:014F		   #392	 433
MSG_1			Byte   DATA:0202		   #14	397
MSG_2			Byte   DATA:0216		   #17	412
MSG_E			Byte   DATA:0228		   #20	423
N			Word   DATA:0200		   #13	401  406  408  415
NEGATIVE		Near   CODE:0019		   46  #52
NEGATIVE_1		Near   CODE:002D		   58  #61
N_EQUALS_0		Near   CODE:0145		   370	#380
OI1			Near   CODE:0074		   186	#194
OI2			Near   CODE:0079		   #197	 203
OI3			Near   CODE:0085		   #205	 209
PA_ARRAY_IS_EMPTY	Near   CODE:00CA		   232	#253
PA_END			Near   CODE:00D5		   251	257  #259
PA_PRINT_END		Near   CODE:00BC		   243	#246
PA_PRINT_LOOP		Near   CODE:00A8		   #235	 244
POSITIVE		Near   CODE:0011		   47  #48
PRINT_BACKSPACE		Near   CODE:00E6		   247	248  #283
PRINT_CLOSE_BRACKET	Near   CODE:0122		   249	255  #342
PRINT_COMMA		Near   CODE:00F3		   238	#297
PRINT_INT2		Near   CODE:0060		   #179	 237  402  418
PRINT_INT2_ARRAY	Near   CODE:0092		   #218
PRINT_OPEN_BRACKET	Near   CODE:0115		   234	254  #328
PRINT_SPACE		Near   CODE:00D9		   239	#270
READ_INT2		Near   CODE:0000		   #35	400
TEMP			Number [STACKSEG:BP-0002]	   #40	50  54	59  62	79  82	89

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

CODE			16  0199 Para	none		   2  #30
DATA			16  0257 Para	none		   2  #10  393
STACKSEG		16  0100 Para	Stack		   2  #5
