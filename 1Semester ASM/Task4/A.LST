Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 1
a.asm



      1					 .386
      2					 assume	CS:code, DS:data, SS:stackseg
      3
      4
      5	    0000			 stackseg segment stack	use16
      6	    0000  0100*(??)			 db 256	dup (?)
      7	    0100			 stackseg ends
      8
      9
     10	    0000			 data	 segment use16
     11	    0000  48 65	6C 6C 6F 20 77+		 message	 db	 "Hello	world, I'm 16bit Dos Assembly !!!", "$"
     12		  6F 72	6C 64 2C 20 49+
     13		  27 6D	20 31 36 62 69+
     14		  74 20	44 6F 73 20 41+
     15		  73 73	65 6D 62 6C 79+
     16		  20 21	21 21 24
     17	    0028  ??				 charchar	 db	 ?
     18
     19	    0029  0100*(????)			 array	 dw	 256 dup (?)
     20	    0229  0000				 n		 dw	 (?)
     21	    022B  45 6E	74 65 72 20 6E+		 msg_1	 DB	 'Enter	n (<= 7):', 13,	10, 62,	32,'$'
     22		  20 28	3C 3D 20 37 29+
     23		  3A 0D	0A 3E 20 24
     24	    023F  46 61	63 74 6F 72 69+		 msg_2	 DB	 'Factorial is:', 13, 10, 62, 32,'$'
     25		  61 6C	20 69 73 3A 0D+
     26		  0A 3E	20 24
     27	    0251  49 6E	63 6F 72 72 65+		 msg_e	 DB	 'Incorrect n (must be in [0...7]). Exiting...', 13, 10,'$'
     28		  63 74	20 6E 20 28 6D+
     29		  75 73	74 20 62 65 20+
     30		  69 6E	20 5B 30 2E 2E+
     31		  2E 37	5D 29 2E 20 45+
     32		  78 69	74 69 6E 67 2E+
     33		  2E 2E	0D 0A 24
     34	    0280			 data	 ends
     35
     36
     37	    0000			 code segment use16
     38
     39						 include IntLib.inc
1    40					 ;requires include SexyPrnt.inc
1    41
1    42	    0000			 read_int2 proc
1    43	    0000  53				 push	 bx
1    44	    0001  51				 push	 cx
1    45	    0002  52				 push	 dx
1    46
1    47						 local	 temp:word ; локальная	переменная
1    48	    0003  33 C0				 xor	 ax, ax	   ; ax	= 0 для символов
1    49	    0005  33 DB				 xor	 bx, bx	   ; bx	= 0 для знака
1    50	    0007  CD 16				 int	 16h	   ; getch
1    51	    0009  32 E4				 xor	 ah, ah
1    52	    000B  3C 2D				 cmp	 al, 45	   ; char '-'
1    53	    000D  74 0A				 je	 negative
1    54	    000F  EB 00				 jmp	 positive
1    55	    0011			  positive:
1    56	    0011  2D 0030			 sub	 ax, 48
1    57	    0014  89 46	FE			 mov	 temp, ax
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 2
a.asm



1    58	    0017  EB 1B				 jmp	 big_int
1    59	    0019			  negative:
1    60	    0019  BB 0001			 mov	 bx, 1
1    61	    001C  C7 46	FE 0000			 mov	 temp, 0
1    62	    0021  EB 11				 jmp	 big_int
1    63	    0023			  end_loop:
1    64	    0023  83 FB	01			 cmp	 bx, 1
1    65	    0026  74 05				 je	 negative_1
1    66	    0028  8B 46	FE			 mov	 ax, temp
1    67	    002B  EB 2F				 jmp	 end_all
1    68	    002D			  negative_1:
1    69	    002D  8B 46	FE			 mov	 ax, temp
1    70	    0030  F7 D8				 neg	 ax
1    71	    0032  EB 28				 jmp	 end_all
1    72	    0034			  big_int:
1    73	    0034  B8 0000			 mov	 ax, 0
1    74	    0037  CD 16				 int	 16h	 ; getch
1    75	    0039  32 E4				 xor	 ah, ah
1    76						 ;mov dx, ax
1    77						 ;int 21h
1    78	    003B  2D 0030			 sub	 ax, 48
1    79	    003E  B9 0009			 mov	 cx, 9
1    80	    0041  3B C1				 cmp	 ax, cx
1    81	    0043  7F DE				 jg	 end_loop
1    82	    0045  B9 0000			 mov	 cx, 0
1    83	    0048  3B C1				 cmp	 ax, cx
1    84	    004A  7C D7				 jl	 end_loop
1    85
1    86	    004C  8B 4E	FE			 mov	 cx, temp
1    87	    004F  6B C9	0A			 imul	 cx, 10
1    88	    0052  03 C8				 add	 cx, ax
1    89	    0054  89 4E	FE			 mov	 temp, cx
1    90						 ;   mov cx, ax
1    91						 ;   mov ax, temp
1    92						 ;   mov bx, 10
1    93						 ;   imul bx
1    94						 ;   add ax, cx
1    95						 ;   mov temp, ax
1    96	    0057  8B 46	FE			 mov	 ax, temp
1    97	    005A  EB D8				 jmp	 big_int
1    98	    005C			  end_all:
1    99	    005C  5A				 pop	 dx
1   100	    005D  59				 pop	 cx
1   101	    005E  5B				 pop	 bx
1   102	    005F  C3				 ret
1   103	    0060			 read_int2 endp
1   104
1   105					 ; read_int2_array proc
1   106
1   107					 ;	   call	print_open_bracket
1   108					 ;	   xor	si, si		; Обнуляем счетчик
1   109					 ;	   reading_cycle:
1   110					 ;	       call read_int2
1   111					 ;	       mov  array[si], ax
1   112					 ;	       add  si,	2
1   113					 ;	       call print_int2
1   114					 ;	       call print_comma
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 3
a.asm



1   115					 ;	       call print_space
1   116					 ;	       mov  ax,	len
1   117					 ;	       shl  ax,	1
1   118					 ;	       cmp  si,	ax
1   119					 ;	       jl   reading_cycle
1   120					 ;	   call	print_backspace
1   121					 ;	   call	print_backspace
1   122					 ;	   call	print_close_bracket
1   123					 ;	   call	CRLF
1   124
1   125					 ;	   ret
1   126					 ;	 ; push	 bp
1   127					 ;	 ; push	 ax
1   128					 ;	 ; push	 bx
1   129					 ;	 ; ; total 6
1   130
1   131					 ;	 ; mov	 bp, sp
1   132					 ;	 ; mov	 si, [bp+10]   ; array
1   133					 ;	 ; mov	 bx, [bp+8]    ; len
1   134					 ;	 ; shl	 bx, 1	       ; *size(int) = 2
1   135					 ;	 ; add	 bx, si	       ; +first	addr
1   136
1   137					 ;	 ;	 mov ax,si
1   138					 ;	 ;	 call print_int2
1   139					 ;	 ;	 call print_space
1   140					 ;	 ;	 mov ax,bx
1   141					 ;	 ;	 call print_int2
1   142					 ;	 ;	 call print_space
1   143					 ;	 ; cmp	   si, bx
1   144					 ;	 ; je	   RA_array_is_empty
1   145
1   146					 ;	 ; call	 print_open_bracket
1   147					 ;  ; RA_read_loop:
1   148
1   149					 ;	 ;	 mov ax,si
1   150					 ;	 ;	 call print_int2
1   151					 ;	 ;	 call print_space
1   152					 ;	 ;	 mov ax,bx
1   153					 ;	 ;	 call print_int2
1   154					 ;	 ;	 call print_space
1   155					 ;	 ; call	 read_int2
1   156					 ;	 ; mov	 si, ax
1   157					 ;	 ; call	 print_int2
1   158					 ;	 ; call	 print_comma
1   159					 ;	 ; call	 print_space
1   160
1   161					 ;	 ; add	   si, 2
1   162					 ;	 ; cmp	   si, bx
1   163					 ;	 ; je	   RA_print_end
1   164					 ;	 ; jmp	   RA_read_loop
1   165
1   166					 ;  ; RA_print_end:
1   167					 ;  ;	 call	 print_backspace
1   168					 ;  ;	 call	 print_backspace
1   169					 ;	 ; call	 print_close_bracket
1   170					 ;	 ; call	 CRLF
1   171					 ;	 ; jmp	 RA_end
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 4
a.asm



1   172
1   173					 ;  ; RA_array_is_empty:
1   174					 ;  ;	 call	 print_open_bracket
1   175					 ;	 ; call	 print_close_bracket
1   176					 ;	 ; call	 CRLF
1   177					 ;	 ; jmp	 RA_end
1   178
1   179					 ;  ; RA_end:
1   180					 ;	 ; pop	 bx
1   181					 ;	 ; pop	 ax
1   182					 ;	 ; pop	 bp
1   183					 ;	 ; ret
1   184					 ; read_int2_array endp
1   185
1   186	    0060			 print_int2 proc
1   187	    0060  50				 push	 ax
1   188	    0061  53				 push	 bx
1   189	    0062  51				 push	 cx
1   190	    0063  52				 push	 dx
1   191
1   192	    0064  85 C0				 test	 ax, ax
1   193	    0066  79 0C				 jns	 oi1
1   194
1   195	    0068  8B C8				 mov	 cx, ax
1   196	    006A  B4 02				 mov	 ah, 02h
1   197	    006C  B2 2D				 mov	 dl, '-'
1   198	    006E  CD 21				 int	 21h
1   199	    0070  8B C1				 mov	 ax, cx
1   200	    0072  F7 D8				 neg	 ax
1   201	    0074			  oi1:
1   202	    0074  33 C9				 xor	 cx, cx
1   203	    0076  BB 000A			 mov	 bx, 10
1   204	    0079			  oi2:
1   205	    0079  33 D2				 xor	 dx,dx
1   206	    007B  F7 F3				 div	 bx
1   207	    007D  52				 push	 dx
1   208	    007E  41				 inc	 cx
1   209	    007F  85 C0				 test	 ax, ax
1   210	    0081  75 F6				 jnz	 oi2
1   211	    0083  B4 02				 mov	 ah, 02h
1   212	    0085			  oi3:
1   213	    0085  5A				 pop	 dx
1   214	    0086  80 C2	30			 add	 dl, '0'
1   215	    0089  CD 21				 int	 21h
1   216	    008B  E2 F8				 loop	 oi3
1   217
1   218	    008D  5A				 pop	 dx
1   219	    008E  59				 pop	 cx
1   220	    008F  5B				 pop	 bx
1   221	    0090  58				 pop	 ax
1   222	    0091  C3				 ret
1   223	    0092			 print_int2 endp
1   224
1   225	    0092			 print_int2_array proc
1   226
1   227	    0092  55				 push	 bp
1   228	    0093  50				 push	 ax
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 5
a.asm



1   229	    0094  53				 push	 bx
1   230						 ; total 6
1   231
1   232	    0095  8B EC				 mov	 bp, sp
1   233	    0097  8B 76	0A			 mov	 si, [bp+10]	; array
1   234	    009A  8B 5E	08			 mov	 bx, [bp+8]    ; len
1   235	    009D  D1 E3				 shl	 bx, 1	       ; *size(int) = 2
1   236	    009F  03 DE				 add	 bx, si	       ; +first	addr
1   237
1   238	    00A1  3B F3				 cmp	 si, bx
1   239	    00A3  74 25				 je	 PA_array_is_empty
1   240
1   241	    00A5  E8 006D			 call	 print_open_bracket
1   242	    00A8			  PA_print_loop:
1   243	    00A8  8B 04				 mov	 ax, [si]      ; current element
1   244	    00AA  E8 FFB3			 call	 print_int2
1   245	    00AD  E8 0043			 call	 print_comma
1   246	    00B0  E8 0026			 call	 print_space
1   247
1   248	    00B3  83 C6	02			 add	 si, 2
1   249	    00B6  3B F3				 cmp	 si, bx
1   250	    00B8  74 02				 je	 PA_print_end
1   251	    00BA  EB EC				 jmp	 PA_print_loop
1   252
1   253	    00BC			  PA_print_end:
1   254	    00BC  E8 0027			 call	 print_backspace
1   255	    00BF  E8 0024			 call	 print_backspace
1   256	    00C2  E8 005D			 call	 print_close_bracket
1   257	    00C5  E8 0038			 call	 CRLF
1   258	    00C8  EB 0B				 jmp	 PA_end
1   259
1   260	    00CA			  PA_array_is_empty:
1   261	    00CA  E8 0048			 call	 print_open_bracket
1   262	    00CD  E8 0052			 call	 print_close_bracket
1   263	    00D0  E8 002D			 call	 CRLF
1   264	    00D3  EB 00				 jmp	 PA_end
1   265
1   266	    00D5			  PA_end:
1   267	    00D5  5B				 pop	 bx
1   268	    00D6  58				 pop	 ax
1   269	    00D7  5D				 pop	 bp
1   270	    00D8  C3				 ret
1   271	    00D9			 print_int2_array endp
1   272
1   273
    274						 include SexyPrnt.inc
1   275					 ; v 1.0
1   276
1   277	    00D9			 print_space proc
1   278	    00D9  50				 push	 ax
1   279	    00DA  52				 push	 dx
1   280
1   281	    00DB  BA 0020			 mov	 dx, 20h
1   282	    00DE  B8 0200			 mov	 ax, 0200h
1   283	    00E1  CD 21				 int	 21h
1   284
1   285	    00E3  5A				 pop	 dx
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 6
a.asm



1   286	    00E4  58				 pop	 ax
1   287	    00E5  C3				 ret
1   288	    00E6			 print_space endp
1   289
1   290	    00E6			 print_backspace proc
1   291
1   292	    00E6  50				 push	 ax
1   293	    00E7  52				 push	 dx
1   294
1   295	    00E8  BA 0008			 mov	 dx, 08h
1   296	    00EB  B8 0200			 mov	 ax, 0200h
1   297	    00EE  CD 21				 int	 21h
1   298
1   299	    00F0  5A				 pop	 dx
1   300	    00F1  58				 pop	 ax
1   301	    00F2  C3				 ret
1   302	    00F3			 print_backspace endp
1   303
1   304	    00F3			 print_comma proc
1   305
1   306	    00F3  50				 push	 ax
1   307	    00F4  52				 push	 dx
1   308
1   309	    00F5  BA 002C			 mov	 dx, 2Ch
1   310	    00F8  B8 0200			 mov	 ax, 0200h
1   311	    00FB  CD 21				 int	 21h
1   312
1   313	    00FD  5A				 pop	 dx
1   314	    00FE  58				 pop	 ax
1   315	    00FF  C3				 ret
1   316	    0100			 print_comma endp
1   317
1   318	    0100			 CRLF proc
1   319
1   320	    0100  50				 push	 ax
1   321	    0101  52				 push	 dx
1   322
1   323	    0102  BA 000D			 mov	 dx, 13
1   324	    0105  B8 0200			 mov	 ax, 0200h
1   325	    0108  CD 21				 int	 21h
1   326	    010A  BA 000A			 mov	 dx, 10
1   327	    010D  B8 0200			 mov	 ax, 0200h
1   328	    0110  CD 21				 int	 21h
1   329
1   330	    0112  5A				 pop	 dx
1   331	    0113  58				 pop	 ax
1   332	    0114  C3				 ret
1   333	    0115			 CRLF endp
1   334
1   335	    0115			 print_open_bracket proc
1   336
1   337	    0115  50				 push	 ax
1   338	    0116  52				 push	 dx
1   339
1   340	    0117  BA 005B			 mov	 dx, 5Bh
1   341	    011A  B8 0200			 mov	 ax, 0200h
1   342	    011D  CD 21				 int	 21h
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 7
a.asm



1   343
1   344	    011F  5A				 pop	 dx
1   345	    0120  58				 pop	 ax
1   346	    0121  C3				 ret
1   347	    0122			 print_open_bracket endp
1   348
1   349	    0122			 print_close_bracket proc
1   350
1   351	    0122  50				 push	 ax
1   352	    0123  52				 push	 dx
1   353
1   354	    0124  BA 005D			 mov	 dx, 5Dh
1   355	    0127  B8 0200			 mov	 ax, 0200h
1   356	    012A  CD 21				 int	 21h
1   357
1   358	    012C  5A				 pop	 dx
1   359	    012D  58				 pop	 ax
1   360	    012E  C3				 ret
1   361	    012F			 print_close_bracket endp
1   362
1   363
    364						 include Task3.inc
1   365
1   366	    012F			 factorial proc
1   367
1   368	    012F  55				 push	 bp
1   369	    0130  53				 push	 bx
1   370						 ; total 4
1   371
1   372	    0131  8B EC				 mov	 bp, sp
1   373	    0133  8B 46	06			 mov	 ax, [bp+6]	 ; n
1   374
1   375						 ; recursion base
1   376	    0136  85 C0				 test	 ax, ax
1   377	    0138  74 0B				 jz		 n_equals_0
1   378
1   379						 ; recursion step
1   380	    013A  8B D8					 mov		 bx, ax
1   381	    013C  48					 dec		 ax
1   382	    013D  50					 push	 ax
1   383	    013E  E8 FFEE				 call	 factorial	 ; ax =	fact(n-1)
1   384	    0141  F7 E3					 mul		 bx			 ; ax =	fact(n-1) * n
1   385	    0143  EB 05					 jmp		 factorial_end
1   386
1   387	    0145				 n_equals_0:
1   388	    0145  B8 0001				 mov		 ax, 1		 ; ax =	1
1   389	    0148  EB 00					 jmp		 factorial_end
1   390
1   391	    014A				 factorial_end:
1   392	    014A  5B					 pop	 bx
1   393	    014B  5D					 pop	 bp
1   394	    014C  C2 0002				 ret		 2
1   395	    014F			 endp factorial
1   396
    397
    398
    399	    014F			  main proc
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 8
a.asm



    400	    014F  B8 0000s			 mov	 ax, data	 ; Loading
    401	    0152  8E D8				 mov	 ds, ax		 ; data	segment
    402
    403	    0154  B8 0900			 mov	 ax, 0900h
    404	    0157  BA 022Br			 mov	 dx,offset msg_1 ; Сообщение1 'Введите n'
    405	    015A  CD 21				 int	 21h		 ;
    406
    407	    015C  E8 FEA1			 call	 read_int2	 ; reads_int, returns to ax
    408	    015F  A3 0229r			 mov	 n, ax
    409	    0162  E8 FEFB			 call	 print_int2	 ; prints int from ax
    410	    0165  E8 FF98			 call	 CRLF
    411
    412						 ; Проверка корректности n
    413	    0168  83 3E	0229r 00		 cmp	 n, 0
    414	    016D  7C 1B				 jl		 incorrect_n
    415	    016F  83 3E	0229r 07		 cmp	 n, 7
    416	    0174  7F 14				 jg		 incorrect_n
    417
    418	    0176  B8 0900			 mov	 ax, 0900h
    419	    0179  BA 023Fr			 mov	 dx,offset msg_2 ; Сообщение 'Факториал равен'
    420	    017C  CD 21				 int	 21h
    421
    422	    017E  FF 36	0229r			 push	 n
    423	    0182  E8 FFAA			 call	 factorial
    424
    425	    0185  E8 FED8			 call	 print_int2
    426	    0188  EB 0A				 jmp		 endz
    427
    428	    018A				 incorrect_n:
    429	    018A  B8 0900				 mov	 ax, 0900h
    430	    018D  BA 0251r				 mov	 dx,offset msg_e ; Сообщение об ошибке
    431	    0190  CD 21					 int	 21h
    432	    0192  EB 00					 jmp		 endz
    433
    434	    0194				 endz:
    435	    0194  B8 4C00			 mov	 ax, 4c00h
    436	    0197  CD 21				 int	 21h
    437	    0199			  main	 endp
    438	    0199			 code	 ends
    439
    440					 end	 main
Turbo Assembler	 Version 3.2	    12/17/14 10:13:45	    Page 9
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/17/14"
??FILENAME		Text   "a	"
??TIME			Text   "10:13:45"
??VERSION		Number 0314
@CPU			Text   0F0FH			   #1
@CURSEG			Text   CODE			   #5  #10  #37
@FILENAME		Text   A
@WORDSIZE		Text   2			   #1  #5  #10	#37
ARRAY			Word   DATA:0029		   #19
BIG_INT			Near   CODE:0034		   58  62  #72	97
CHARCHAR		Byte   DATA:0028		   #17
CRLF			Near   CODE:0100		   257	263  #318  410
ENDZ			Near   CODE:0194		   426	432  #434
END_ALL			Near   CODE:005C		   67  71  #98
END_LOOP		Near   CODE:0023		   #63	81  84
FACTORIAL		Near   CODE:012F		   #366	 383  423
FACTORIAL_END		Near   CODE:014A		   385	389  #391
INCORRECT_N		Near   CODE:018A		   414	416  #428
MAIN			Near   CODE:014F		   #399	 440
MESSAGE			Byte   DATA:0000		   #11
MSG_1			Byte   DATA:022B		   #21	404
MSG_2			Byte   DATA:023F		   #24	419
MSG_E			Byte   DATA:0251		   #27	430
N			Word   DATA:0229		   #20	408  413  415  422
NEGATIVE		Near   CODE:0019		   53  #59
NEGATIVE_1		Near   CODE:002D		   65  #68
N_EQUALS_0		Near   CODE:0145		   377	#387
OI1			Near   CODE:0074		   193	#201
OI2			Near   CODE:0079		   #204	 210
OI3			Near   CODE:0085		   #212	 216
PA_ARRAY_IS_EMPTY	Near   CODE:00CA		   239	#260
PA_END			Near   CODE:00D5		   258	264  #266
PA_PRINT_END		Near   CODE:00BC		   250	#253
PA_PRINT_LOOP		Near   CODE:00A8		   #242	 251
POSITIVE		Near   CODE:0011		   54  #55
PRINT_BACKSPACE		Near   CODE:00E6		   254	255  #290
PRINT_CLOSE_BRACKET	Near   CODE:0122		   256	262  #349
PRINT_COMMA		Near   CODE:00F3		   245	#304
PRINT_INT2		Near   CODE:0060		   #186	 244  409  425
PRINT_INT2_ARRAY	Near   CODE:0092		   #225
PRINT_OPEN_BRACKET	Near   CODE:0115		   241	261  #335
PRINT_SPACE		Near   CODE:00D9		   246	#277
READ_INT2		Near   CODE:0000		   #42	407
TEMP			Number [STACKSEG:BP-0002]	   #47	57  61	66  69	86  89	96

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

CODE			16  0199 Para	none		   2  #37
DATA			16  0280 Para	none		   2  #10  400
STACKSEG		16  0100 Para	Stack		   2  #5
